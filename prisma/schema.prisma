generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model attendance {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date       DateTime @db.Date
  student_id String?  @db.Uuid
  staff_id   String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  staff      staff?   @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student    student? @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model course {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String       @db.VarChar(255)
  institute_id String?      @db.Uuid
  created_at   DateTime     @default(now()) @db.Timestamp(6)
  updated_at   DateTime     @default(now()) @db.Timestamp(6)
  institute    institute?   @relation(fields: [institute_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  course_fee   course_fee[]
}

model course_fee {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fee        Int
  course_id  String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  course     course?  @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model institute {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?   @db.VarChar(255)
  image       String?   @db.VarChar(255)
  name        String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user_id     String    @db.Uuid
  tenant_id   String    @db.VarChar(255)
  course      course[]
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  staff       staff[]
  student     student[]
}

model payroll {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  salary     Int
  staff_id   String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  staff      staff?   @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model staff {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String       @db.VarChar(255)
  institute_id String?      @db.Uuid
  user_id      String?      @db.Uuid
  created_at   DateTime     @default(now()) @db.Timestamp(6)
  updated_at   DateTime     @default(now()) @db.Timestamp(6)
  attendance   attendance[]
  payroll      payroll[]
  institute    institute?   @relation(fields: [institute_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         user?        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model student {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String       @db.VarChar(255)
  institute_id String?      @db.Uuid
  user_id      String?      @db.Uuid
  created_at   DateTime     @default(now()) @db.Timestamp(6)
  updated_at   DateTime     @default(now()) @db.Timestamp(6)
  attendance   attendance[]
  institute    institute?   @relation(fields: [institute_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         user?        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String      @unique @db.VarChar(255)
  firstName   String?     @db.VarChar(255)
  lastName    String?     @db.VarChar(255)
  roq_user_id String      @db.VarChar(255)
  tenant_id   String      @db.VarChar(255)
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  institute   institute[]
  staff       staff[]
  student     student[]
}
